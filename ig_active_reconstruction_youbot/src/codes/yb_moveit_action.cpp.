#include <string>
#include <ros/ros.h>
#include <iostream>
#include <moveit/move_group_interface/move_group.h>

namespace ig_active_reconstruction_youbot
{
namespace robot
{

  YoubotAction::YoubotAction ( ros::NodeHandle nh )
  {
    nh_ = nh;
    //robot_moving_service_ = nh.advertiseService("youbot/move_to", &RosServerYoubot::moveToService, this );
    //robot_moving_to_joints_service_ = nh.advertiseService("youbot/move_to_joints", &ViewSpace::moveArmUsingJoints, this );
  }

  YoubotAction::moveArmUsingJoints( std::map<std::string, double> joints_map )
  {
    moveit::planning_interface::MoveGroup group("arm_1");
    ros::AsyncSpinner spinner(1);
    spinner.start();

    //group.setPlanningTime(10);
    ROS_INFO_NAMED("Arm_1", "Reference frame: %s", group.getPlanningFrame().c_str());
    ROS_INFO_NAMED("Arm_1", "End effector link: %s", group.getEndEffectorLink().c_str());

    group.setJointValueTarget( joints_map );
    group.move();

    move_group_interface::MoveGroup::Plan plan;
    if (!group.plan(plan))
    {
      ROS_FATAL("Cannot execute motion. No motion plan found. Aborting.");
      exit(-1);
      return false;
    }
    
    //non blocking request
    group.asyncExecute(plan); 
    
    // cancel motion after some times
    sleep(0.1);
    group.stop();
    sleep(1.0); //wait for stop command

    return true;
  }

}
}